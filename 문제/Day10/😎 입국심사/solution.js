function solution(n, times) {
  // 시간 안에 모두를 심사할 수 있는 지 확인하는 함수
  function canSimsa(maxTime) {
    return n <= times.reduce((acc, time) => acc + Math.floor(maxTime / time), 0);
  }

  // 이분 탐색
  let l = 0;
  let r = times.reduce((acc, time) => (time > acc ? time : acc), 0) * n;
  while (l < r) {
    const mid = Math.floor((l + r) / 2);

    // 답이 될 수 있는 경우 r을 땡김 -> 시간(중간값)이 짧아짐
    if (canSimsa(mid)) r = mid;
    // 답이 될 수 없는 경우 l을 땡김 -> 시간(중간값)이 커짐
    else l = mid + 1;
  }

  var answer = r;
  return answer;
}

/* 🦩
매개 변수 탐색이란, 특정 변수(매개 변수)가 어느 순간 최적의 답이 될 때까지 탐색하는 알고리즘을 의미한다.
즉 전부 다 때려박고 가장 최적의 해를 찾는 과정도 매개 변수 탐색이라 볼 수 있다.

실제로 입국 심사 문제를 살펴보면, 정답이 될 수 있는 값의 범위는 최소 0, 최대 (가장 느리게 처리하는 심사원의 시간 * 심사해야 하는 사람의 수)이다.
우리가 구해야 하는 값은 정답이 될 수 있는 최소 시간이므로, 최대 시간부터 시작해 1을 빼가면서 모든 경우를 확인하는 방법을 생각해볼 수 있다.
(만약 정답이 될 수 없는 순간이 온다면 그 바로 전 값이 최적의 해인 셈)

근데 시간의 범위가 최대 1,000,000,000 * 1,000,000,000 이므로, 일일이 빼서 계산하면 당연히 시간초과가 발생한다.
그래서 1만큼 빼는 O(N) 방식이 아닌 O(logN)의 이분 탐색 알고리즘을 활용한다.

어떤 시간이 정답이 될 수 있는지 확인하기 위해 그 시간안에 모든 사람을 심사할 수 있는지 여부를 구해야 한다.
이는 심사원 별로 주어진 시간 내에 심사할 수 있는 사람 수를 계산하고, 그 합이 심사해야 하는 사람 수 이상인지 확인하면 된다.
*/
